#-*- Python -*-

# SConsBuilder Project File
#
# This file will be executed after the initial build environment is created
# but before it is finalized.
#
# - Available variables for import -
#
# init_env - Initial build environment
#
# - Available environment variables -
#
#  init_env['BUILD_DIR'] - building directory
#  init_env['OBJ_DIR']   - building subdirectory for object files, etc.
#
# You should at least declare following init_env variables:
#
# INCLUDE_DIR      - Include directory
# SOURCE_DIRS      - All source directories 
# LIB_DIR          - Destination directory for libraries
# BIN_DIR          - Destination directory for executables
# CONFIG_HEADER    - Used for autogenerated configuration header
#                    use None or ConfigHeader()
#
# WIN_DEBUG_SUFFIX - Used on Windows platform for specification of
#                    the debug suffix for libraries which are compiled
#                    with debug version of the MSVC runtime library.
#
# PROJECT_PREFIX   - Used for auto-configuration
# SYSTEM_PREFIX    - Used for auto-configuration
# COMPILER_PREFIX  - Used for auto-configuration
# AUTOCONF_PREFIX  - Used for auto-configuration

import sys
import os
import os.path
import datetime
from builder.btools import *

Import('init_env')

AddCustomVariables(
    BoolVariable('makebindings', 'create bindings with SWIG', 1),
    BoolVariable('python', 'compile python bindings', 0),
    ('INIMAGE_DIST_DIR', 'Path to inImage distribution'),
    BoolVariable('enable_rtfact',
                 'enable building of RTfact rendering module', 1)
    )

BUILD_DIR = init_env['BUILD_DIR']

SOURCE_DIRS = Split("""
#src
""")

INCLUDE_DIR = BUILD_DIR + os.sep + 'include'
LIB_DIR = BUILD_DIR + os.sep + 'lib'
BIN_DIR = BUILD_DIR + os.sep + 'bin'

CONFIG_HEADER = ConfigHeader()

# define symbol prefixes

PROJECT_PREFIX = 'RTSG_'
SYSTEM_PREFIX = ''
COMPILER_PREFIX = 'COMPILER_'
AUTOCONF_PREFIX = 'RTSG_'

init_env.Replace(CXXFILESUFFIX='.cpp',
                 INCLUDE_DIR=INCLUDE_DIR,
                 SOURCE_DIRS=SOURCE_DIRS,
                 LIB_DIR=LIB_DIR,
                 BIN_DIR=BIN_DIR,
                 CONFIG_HEADER=CONFIG_HEADER,
                 WIN_DEBUG_SUFFIX="D",
                 PROJECT_PREFIX=PROJECT_PREFIX,
                 SYSTEM_PREFIX=SYSTEM_PREFIX,
                 COMPILER_PREFIX=COMPILER_PREFIX,
                 AUTOCONF_PREFIX=AUTOCONF_PREFIX,
                 CPPPATH=SOURCE_DIRS,
                 LIBPATH=[LIB_DIR])

# Setup configuration, conf is created by env.Configure()

def customizeConfiguration(conf):
    # in conf.env is the environment that can be changed
    isWin32 = conf.env['PLATFORM'] == 'win32'

    # On Windows append win32tools/include to CPPPATH
    #                   win32tools/lib to LIBPATH
    #                   win32tools/bin to PATH
    if isWin32:
        win32toolsDir = os.path.join(conf.env.Dir('#').abspath, 'win32tools')
        if os.path.exists(win32toolsDir):
            conf.env.Append(CPPPATH = [os.path.join(win32toolsDir, 'include')])
            conf.env.Append(LIBPATH = [os.path.join(win32toolsDir, 'lib')])
            conf.env.AppendENVPath('PATH', os.path.join(win32toolsDir, 'bin'))

    # init lex tool
    conf.env.Tool('lex')
    # check lex tool

    pathToLex = conf.env.WhereIs(conf.env.get('LEX'))
    if not pathToLex:
        print >>sys.stderr, 'Error: Could not find lex/flex tool'
        Exit(1)
    else:
        print '* Use lexer tool from %s' % pathToLex

    if not conf.CheckCCompiler():
        print >>sys.stderr, 'Error: Could not run C/C++ compiler'
        Exit(1)
    
    if not conf.CheckTypeSizes():
        print >>sys.stderr, 'Error: Could not determine type sizes'
        Exit(1)

    if not conf.CheckEndianness():
        print >>sys.stderr, 'Error: Could not determine platform endianness'
        Exit(1)
        
    if conf.CheckTclTk(write_config_h=False):
        conf.env.Replace(HAVE_TCL=1)
    else:
        conf.env.Replace(HAVE_TCL=0)

    if conf.CheckPython():
        conf.env.Replace(HAVE_PYTHON=1)
    else:
        conf.env.Replace(HAVE_PYTHON=0)
        
    if conf.CheckSwig():
        conf.env.Replace(HAVE_SWIG=1)
    else:
        conf.env.Replace(HAVE_SWIG=0)
        
    if conf.CheckPNG():
        conf.env.Replace(HAVE_PNG=1)
    else:
        conf.env.Replace(HAVE_PNG=0)
        print >>sys.stderr, 'Warning: Could not find png library.'

    if conf.CheckJPEG():
        conf.env.Replace(HAVE_JPEG=1)
    else:
        conf.env.Replace(HAVE_JPEG=0)
        print >>sys.stderr, 'Warning: Could not find jpeg library.'

    if conf.CheckInImage(write_config_h=False):
        conf.env.Replace(HAVE_INIMAGE=1)
    else:
        conf.env.Replace(HAVE_INIMAGE=0)

    # because NMM is not a part of RTSG core we do not write
    # detection macro RTSG_HAVE_NMM to the autogenerated config file
    if conf.CheckNMM(write_config_h=False):
        conf.env.Replace(HAVE_NMM=1)
    else:
        conf.env.Replace(HAVE_NMM=0)

    if conf.CheckPthreads():
        conf.env.Replace(HAVE_PTHREADS=1)
    else:
        conf.env.Replace(HAVE_PTHREADS=0)

    if conf.CheckOpenGL(write_config_h=False):
        conf.env.Replace(HAVE_GL=1)
    else:
        conf.env.Replace(HAVE_GL=0)


    if conf.CheckGLUT(write_config_h=False):
        conf.env.Replace(HAVE_GLUT=1)
        conf.env.Replace(HAVE_GL=1)
    else:
        conf.env.Replace(HAVE_GLUT=0)
        conf.env.Replace(HAVE_GL=0)
        
    if conf.CheckGLEW(write_config_h=False):
        conf.env.Replace(HAVE_GLEW=1)
        conf.env.Replace(HAVE_GL=1)
    else:
        conf.env.Replace(HAVE_GLEW=0)
        conf.env.Replace(HAVE_GL=0)
        
    if conf.CheckSDL(write_config_h=False):
        conf.env.Replace(HAVE_SDL=1)
        if conf.CheckSDLTTF(write_config_h=False):
            conf.env.Replace(HAVE_SDLTTF=1)
        else:
            conf.env.Replace(HAVE_SDLTTF=0)
    else:
        conf.env.Replace(HAVE_SDL=0)
        conf.env.Replace(HAVE_SDLTTF=0)

    if conf.CheckOgre(write_config_h=False):
        conf.env.Replace(HAVE_OGRE=1)
    else:
        conf.env.Replace(HAVE_OGRE=0)
        
    if conf.CheckOIS(write_config_h=False):
        conf.env.Replace(HAVE_OIS=1)
    else:
        conf.env.Replace(HAVE_OIS=0)
        
    # check boost headers
    if not conf.CheckCXXHeader('boost/bind.hpp') or \
           not conf.CheckCXXHeader('boost/function.hpp') or \
           not conf.CheckCXXHeader('boost/variant.hpp') or \
           not conf.CheckCXXHeader('boost/lexical_cast.hpp') or \
           not conf.CheckCXXHeader('boost/algorithm/string/predicate.hpp') or \
           not conf.CheckCXXHeader('boost/foreach.hpp'):
        print >>sys.stderr, 'Error: Could not find boost libraries'
        Exit(1)

    if conf.CheckBoostFileSystem():
        conf.env.Replace(HAVE_BOOST_FILESYSTEM=1)
    else:
        conf.env.Replace(HAVE_BOOST_FILESYSTEM=0)

    if conf.CheckBoostRegex():
        conf.env.Replace(HAVE_BOOST_REGEX=1)
    else:
        conf.env.Replace(HAVE_BOOST_REGEX=0)

    if conf.CheckRTfactRemote():
        conf.env.Replace(HAVE_RTFACT_REMOTE=1)
    else:
        conf.env.Replace(HAVE_RTFACT_REMOTE=0)

RegisterConfigurationCustomizer(customizeConfiguration)

# Customize final environment

def finalizeEnvironment(env):
    # Evaluate building hierarchy
    Export('env')

    # setup install directories

    INSTALL_DIR = env['prefix']
    
    INSTALL_INCLUDE_DIR = os.path.join(INSTALL_DIR, 'include')
    INSTALL_LIB_DIR     = os.path.join(INSTALL_DIR, 'lib')
    INSTALL_BIN_DIR     = os.path.join(INSTALL_DIR, 'bin')

    INSTALL_DIRS = [INSTALL_INCLUDE_DIR,
                    INSTALL_LIB_DIR,
                    INSTALL_BIN_DIR]
    
    env.Replace(INSTALL_INCLUDE_DIR = INSTALL_INCLUDE_DIR,
                INSTALL_LIB_DIR = INSTALL_LIB_DIR,
                INSTALL_BIN_DIR = INSTALL_BIN_DIR,
                INSTALL_DIRS = INSTALL_DIRS)

    # process all source directories

    for srcDir in SOURCE_DIRS:
        buildDir = srcDir
        if buildDir.startswith('#'):
            buildDir = buildDir[1:]

        buildDir = os.path.join(env['OBJ_DIR'], buildDir)

        VariantDir(buildDir, srcDir, duplicate=0)
        SConscript(os.path.join(buildDir, 'SConscript'))

    # Alternate method to setup build directory :
    # SConscript('src' + os.sep + 'SConscript',
    #            build_dir=env['BUILD_DIR'],
    #            src_dir=env['SRC_DIR'],
    #            duplicate=0)

    # build documentation

    DOXYGEN_OUTPUT_DIR = '#doc/doxygen'
    DOXYGEN_CONFIG_FILE = '#doc/Doxyfile'
    
    env.Command(env.Dir(DOXYGEN_OUTPUT_DIR), DOXYGEN_CONFIG_FILE,
                "doxygen $SOURCES",
                ENV = {'DOXYGEN_OUTPUT_DIR' : env.Dir(DOXYGEN_OUTPUT_DIR).abspath,
                       'DOXYGEN_INPUT_DIR' : env.Dir('#src').abspath
                       })
    env.Alias('doc', env.Dir(DOXYGEN_OUTPUT_DIR))
    env.AlwaysBuild(env.Dir(DOXYGEN_OUTPUT_DIR))
    Help("""doc:            Generate doxygen documentation""")

    # default targets

    Default(env['BUILD_DIR'])
    Default(env['INCLUDE_DIR'])
    
    # install targets

    env.Alias('install', INSTALL_DIR)
    
    # release and full-release target

    curdate = datetime.date.today().isoformat()

    MAJOR_VERSION = 0
    MINOR_VERSION = 4
    PATCH_VERSION = 0

    VERSION = "%i-%i-%i" % (MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION)
    TARGET_ARCH_SUFFIX = env.get('TARGET_ARCH_SUFFIX', 'IA32')

    RELEASE_NAME = 'rtsg-Release-Version-%s-%s-%s' % \
                   (VERSION, TARGET_ARCH_SUFFIX, curdate)

    FULL_RELEASE_NAME = 'rtsg-Full-Release-Version-%s-%s-%s' % \
                        (VERSION, TARGET_ARCH_SUFFIX, curdate)

    release = env.CreateDist('#/'+RELEASE_NAME,
                             Split('bin lib bin-openrt lib-openrt'),
                             'rtsg',
                             excludeExts=['.cvsignore', '.sconsign'],
                             excludeDirs=['CVS','.svn','.sconf_temp'])
    env.Alias('release', release)

    full_release = env.CreateDist('#/'+FULL_RELEASE_NAME,
                                  Split('bin lib bin-openrt lib-openrt include include-openrt engines'),
                                  'rtsg',
                                  excludeExts=['.cvsignore', '.sconsign'],
                                  excludeDirs=['CVS','.svn','.sconf_temp'])
    env.Alias('full-release', full_release)

    
RegisterEnvironmentFinalizer(finalizeEnvironment)
